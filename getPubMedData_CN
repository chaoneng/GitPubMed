
library(easyPubMed)
library(tidyverse)
library(dplyr)

library(SnowballC)
library(tm)
library(pubmed.mineR)
library(text2vec)
library(RISmed)
library(tibble)
library(dplyr)
library(wordcloud2)
library(LDAvis)
library(qdap)
library(tidytext)
library(stringr)
library(ggplot2)
library(tidyr)
library(rJava)
library(ggraph)
library(janeaustenr)
library(grid)

######
ptm <- proc.time()
extract_xml <- function(theFile) {
  library(XML)
  newData <- xmlParse(theFile)
  records <- getNodeSet(newData, "//PubmedArticle")
  pmid <- xpathSApply(newData,"//MedlineCitation/PMID", xmlValue)
  authLast <- lapply(records, xpathSApply, ".//Author/LastName", xmlValue)
  
  ## affiliations <- lapply(records, xpathSApply, ".//Author/AffiliationInfo/Affiliation", xmlValue)
  ## affiliations[sapply(affiliations, is.list)] <- NA
  ## affiliations <- sapply(affiliations, paste, collapse = "|")
  year <- lapply(records, xpathSApply, ".//PubDate/Year", xmlValue) 
  year[sapply(year, is.list)] <- NA
  year <- unlist(year)
  articletitle <- lapply(records, xpathSApply, ".//ArticleTitle", xmlValue) 
  articletitle[sapply(articletitle, is.list)] <- NA
  articletitle <- unlist(articletitle)
  journal <- lapply(records, xpathSApply, ".//ISOAbbreviation", xmlValue) 
  journal[sapply(journal, is.list)] <- NA
  journal <- unlist(journal)
  abstract <- lapply(records, xpathSApply, ".//Abstract/AbstractText", xmlValue)
  abstract[sapply(abstract, is.list)] <- NA
  abstract <- sapply(abstract, paste, collapse = "|")
  theDF <- data.frame(pmid, year, articletitle, journal, abstract,stringsAsFactors = FALSE)
  return(theDF)
}
#G:\PubmedCancer11_16
paperdf= extract_xml("C:/Users/cnwang/Desktop/demo/pubmed_result_2011.xml")
proc.time() - ptm
paperdf

######
#Journal conunt
######
library(RISmed)
#journal<-result$pubmedArticle
journal <- paperdf$journal

cancer_journal_count <- as.data.frame(table(journal))
cancer_journal_count_top25 <- cancer_journal_count[order(-cancer_journal_count[,2]),][1:10,]
#write.table(cancer_journal_count,"D:/jounsl_non_count")
####

#####
journal_names <- paste(cancer_journal_count_top25$journal,"[jo]",sep="")

total_journal <- NULL
for (i in journal_names){
  perjournal <- EUtilsSummary(i, type='esearch', db='pubmed',mindate=2011, maxdate=2016)
  total_journal[i] <- QueryCount(perjournal)
}

journal_cancer_total <- cbind(cancer_journal_count_top25,total_journal)
names(journal_cancer_total) <- c("journal","cancer_publications","Total_publications")
journal_cancer_total$cancer_publications_normalized <- journal_cancer_total$cancer_publications / journal_cancer_total$Total_publications

write.table(journal_cancer_total,"C:/Users/cnwang/Desktop/cancer_publications_per_journal.txt",quote=F,sep="\t",row.names=F)

pubs_per_journal <- read.table("C:/Users/cnwang/Desktop/cancer_publications_per_journal.txt",header = T,sep="\t")


#plot
ggplot(pubs_per_journal,aes(journal, cancer_publications,fill=journal)) + geom_bar(stat="identity")+
  coord_flip()+
  theme(legend.position="none")

ggplot(pubs_per_journal ,aes(journal, cancer_publications_normalized,fill=journal)) + geom_bar(stat="identity")+
  coord_flip()+
  theme(legend.position="none")

######
#Get Gene/disease/chemical/foodd
######

pmids = paperdf$PMID
pubtator_result <- data.frame()
pubmids1=pmids[20001:20500]
pubmids2=pmids[20501:21000]
pubmids3=pmids[21001:21500]
pubmids4=pmids[21501:22000]
pubmids5=pmids[22001:22500]
pubmids6=pmids[22501:23000]
pubmids7=pmids[23001:23333]
pubmids8=pmids[18501:19000]
pubmids9=pmids[19001:19500]
pubmids10=pmids[19501:20000]

pubtator_result1=lapply(pubmids1,pubtator_function)
pubtator_result2=lapply(pubmids2,pubtator_function)
pubtator_result3=lapply(pubmids3,pubtator_function)
pubtator_result4=lapply(pubmids4,pubtator_function)
pubtator_result5=lapply(pubmids5,pubtator_function)
pubtator_result6=lapply(pubmids6,pubtator_function)
pubtator_result7=lapply(pubmids7,pubtator_function)
pubtator_result8=lapply(pubmids8,pubtator_function)
pubtator_result9=lapply(pubmids9,pubtator_function)
pubtator_result10=lapply(pubmids10,pubtator_function)

gene1=sapply(pubtator_result1 , "[",1)
disease1=sapply(pubtator_result1 , "[",2)
muation1=sapply(pubtator_result1 , "[",3)
chemical1=sapply(pubtator_result1 , "[",4)
Species1=sapply(pubtator_result1 , "[",5)

gene2=sapply(pubtator_result2 , "[",1)
disease2=sapply(pubtator_result2 , "[",2)
muation2=sapply(pubtator_result2 , "[",3)
chemical2=sapply(pubtator_result2 , "[",4)
Species2=sapply(pubtator_result2 , "[",5)

gene3=sapply(pubtator_result3 , "[",1)
disease3=sapply(pubtator_result3 , "[",2)
muation3=sapply(pubtator_result3, "[",3)
chemical3=sapply(pubtator_result3 , "[",4)
Species3=sapply(pubtator_result3 , "[",5)


gene4=sapply(pubtator_result4 , "[",1)
disease4=sapply(pubtator_result4 , "[",2)
muation4=sapply(pubtator_result4 , "[",3)
chemical4=sapply(pubtator_result4 , "[",4)
Species4=sapply(pubtator_result4 , "[",5)


gene5=sapply(pubtator_result5, "[",1)
disease5=sapply(pubtator_result5, "[",2)
muation5=sapply(pubtator_result5 , "[",3)
chemical5=sapply(pubtator_result5 , "[",4)
Species5=sapply(pubtator_result5 , "[",5)


gene6=sapply(pubtator_result6 , "[",1)
disease6=sapply(pubtator_result6 , "[",2)
muation6=sapply(pubtator_result6 , "[",3)
chemical6=sapply(pubtator_result6 , "[",4)
Species6=sapply(pubtator_result6, "[",5)

gene7=sapply(pubtator_result7 , "[",1)
disease7=sapply(pubtator_result7 , "[",2)
muation7=sapply(pubtator_result7 , "[",3)
chemical7=sapply(pubtator_result7 , "[",4)
Species7=sapply(pubtator_result7 , "[",5)




genec7=combine(gene1,gene2,gene3,gene4,gene5,gene6,gene7)
diseasec7=combine(disease1,disease2,disease3,disease4,disease5,disease6,disease7)
chemicalc7=combine(chemical1,chemical2,chemical3,chemical4,chemical5,chemical6,chemical7)

all_gene=combine(gene,genec2,genec3,genec4,genec5,genec6,genec7)
all_diseasec=combine(disease,diseasec2,diseasec3,diseasec4,diseasec5,diseasec6,diseasec7)
all_chemicalc=combine(chemical,chemicalc2,chemicalc3,chemicalc4,chemicalc5,chemicalc6,chemicalc7)


lapply(all_gene, function(x) write.table( data.frame(x), 'D:/all_gene.csv'  , append= T, sep=',' ))
lapply(all_diseasec, function(x) write.table( data.frame(x), 'D:/all_diseasec.txt'  , append= T, sep=',' ))
lapply(all_chemicalc, function(x) write.table( data.frame(x), 'D:/all_chemicalc.txt'  , append= T, sep=',' ))


gene_docs <- Corpus(VectorSource(all_gene)) 
chemical_docs <- Corpus(VectorSource(all_chemicalc)) 
disease_docs <- Corpus(VectorSource(all_diseasec)) 


gene_docs <- as.matrix(TermDocumentMatrix(gene_docs)) 
chemical_docs <- as.matrix(TermDocumentMatrix(chemical_docs)) 
disease_docs <- as.matrix(TermDocumentMatrix(disease_docs)) 

gene_docs_freq <- data.frame(ST = rownames(gene_docs), 
                             Freq = rowSums(gene_docs), 
                             row.names = NULL)
chemical_docs_freq <- data.frame(ST = rownames(chemical_docs), 
                                 Freq = rowSums(chemical_docs), 
                                 row.names = NULL)
disease_docs_freq <- data.frame(ST = rownames(disease_docs), 
                                Freq = rowSums(disease_docs), 
                                row.names = NULL)
write.table(gene_docs_freq,"D:/gene_docs_freq.txt")
write.table(chemical_docs_freq,"D:/chemical_docs_freq.txt")
write.table(disease_docs_freq,"D:/disease_docs_freq.txt")

### not sure rbind to large data
myfunction1<- function(pubtator_result){
  gene=sapply(pubtator_result , "[",1)
  return(gene)
}
###
### not sure rbind to large data
myfunction2 <- function(pubtator_result){
  disease=sapply(pubtator_result, "[",2)
  return(disease)
}
###
### not sure rbind to large data
myfunction3 <- function(pubtator_result){
  chemical=sapply(pubtator_result, "[",4)
  return(chemical)
}
###
### not sure rbind to large data
myfunction4 <- function(pubtator_result){
  muation=sapply(pubtator_result, "[",3)
  return(muation)
}
###
### not sure rbind to large data
myfunction5 <- function(pubtator_result){
  Species=sapply(pubtator_result, "[",5)
  return(Species)
}
###


###plot

colnames(gene_docs_freq) <- c("gene","Freq")
cancer_gene_count_top25 <- gene_docs_freq[order(-gene_docs_freq[,2]),][2:26,]
ggplot(cancer_gene_count_top25,aes(gene,Freq,fill= gene)) + geom_bar(stat="identity")+
  coord_flip()+
  theme(legend.position="none")

colnames(chemical_docs_freq) <- c("disease","Freq")
cancer_disease_count_top25 <- chemical_docs_freq[order(-chemical_docs_freq[,2]),][2:26,]
ggplot(cancer_disease_count_top25,aes(disease,Freq,fill= disease)) + geom_bar(stat="identity")+
  coord_flip()+
  theme(legend.position="none")


colnames(disease_docs_freq) <- c("chemical","Freq")
cancer_chemical1_count_top25 <- disease_docs_freq[order(-disease_docs_freq[,2]),][2:26,]
ggplot(cancer_chemical1_count_top25,aes(chemical,Freq,fill= chemical)) + geom_bar(stat="identity")+
  coord_flip()+
  theme(legend.position="none")

######
#count cancer of type
######
library(stringr)
#ab = Abstract
ab =paperdf$abstract
#ab=result$pubmedAbstractText

br=str_count(ab,"breast cancer")
lu=str_count(ab,"lung cancer")
ba=str_count(ab,"brain cancer")
co=str_count(ab,"colon cancer")
bl=str_count(ab,"bladder cancer")
ce=str_count(ab,"cervical cancer")
re=str_count(ab,"rectal cancer")
li=str_count(ab,"liver cancer")
bla=str_count(ab,"bladder cancer")
kid=str_count(ab,"Kidney cancer")
pa=str_count(ab,"pancreatic cancer")
th=str_count(ab,"thyroid cancer")
pr=str_count(ab,"prostate cancer")
sk=str_count(ab,"skin cancer")
vu=str_count(ab,"vulvar cancer")
va=str_count(ab,"vaginal cancer")
na=str_count(ab,"nasopharyngeal cancer")
ov=str_count(ab,"ovarian cancer")
pe=str_count(ab,"penile cancer")
pro=str_count(ab,"prostate cancer")
bon=str_count(ab,"bone cancer")
bd=str_count(ab,"bile Duct cancer")
ana=str_count(ab,"anal cancer")
blad=str_count(ab,"bladder cancer")
eye=str_count(ab,"eye cacner")

cbin=cbind(eye,blad,br,lu,ba,co,bl,ce,re,li,bla,kid,pa,th,pr,sk,vu,va,na,ov,pe,pro,bon,bd,ana)
#count(cbin, vars = c("eye", "blad","br","lu","ba","co","bl","ce","re","li","bla","kid","pa","th","pr","sk","vu","va","na","ov","pe","pro","bon","bd","ana"))
cancer_freq<- colSums(cbin)
cancer_freq<-as.data.frame(cancer_freq)
cancer <-  c("Eye Cacner","Bladder Cancer","Breast Cancer","Lung Cancer","Brain Cancer","Colon Cancer",
             "Bladder Cancer","Cervical Cancer","Rectal Cancer","liver Cancer","Bladder Cancer","Kidney Cancer",
             "Pancreatic Cancer","Thyroid Cancer","Prostate Cancer","Skin Cancer","Vulvar Cancer","Vaginal Cancer","Nasopharyngeal Cancer",
             "Ovarian Cancer","Penile Cancer","Prostate Cancer","Bone Cancer","Bile Duct Cancer","Anal Cancer")

count_cancer = cbind(cancer, cancer_freq)
write.table(count_cancer,"C:/Users/cnwang/Desktop/count_cancer_2011.txt",quote=F,sep="\t",row.names=F)
na.omit(count_cancer)
###plot
ggplot(count_cancer,aes(cancer,cancer_freq,fill= cancer)) + geom_bar(stat="identity")+
  coord_flip()+
  theme(legend.position="none")


######
##define same word
#####
#trans to character
#abstracts <- abstracts %>% mutate(abstract = as.character(abstract))

#pubmed_data$Abstract <- as.character(pubmed_data$Abstract)
#pubmed_data$Abstract <- gsub(",", " ", pubmed_data$Abstract, fixed = TRUE)
#reove
#stopwords_regex = paste(stopwords('en'), collapse = '\\b|\\b')
#stopwords_regex = paste0('\\b', stopwords_regex, '\\b')
#documents = stringr::str_replace_all(pubmed_data, stopwords_regex, '')

##define same word
synonyms <- list(
  list(word="cancer", syns=c("cancers"))
)
synonyms2<- list(
  list(word="patient", syns=c("patients"))
)
replaceSynonyms <- content_transformer(function(x, syn=NULL) { 
  Reduce(function(a,b) {
    gsub(paste0("\\b(", paste(b$syns, collapse="|"),")\\b"), b$word, a)}, syn, x)   
})

####
library(tm)
docs <- Corpus(VectorSource(ab)) 

clean_corpus <- function(corpus){
  # Eliminate extra white spaces
  corpus <- tm_map(corpus, stripWhitespace)
  # Remove punctuations
  corpus <- tm_map(corpus, removePunctuation)
  # Convert the text to lower case
  corpus <- tm_map(corpus, content_transformer(tolower))
  # Remove english common stopwords
  corpus <- tm_map(corpus, removeWords, c(stopwords("en"),"thou"))
  # Remove numbers
  corpus <- tm_map(corpus, removeNumbers)
  # specify your stopwords as a character vector
  corpus <- tm_map(corpus, removeWords, c("the",'\n','p')) 
  
  ##synonyms
  corpus <- tm_map(corpus, replaceSynonyms, synonyms)
  corpus <- tm_map(corpus, replaceSynonyms, synonyms2)
  
  return(corpus)
}

docs<-clean_corpus(docs)

###
#tcm/dtm
###
library(text2vec)
docs=as.character(docs)
it = itoken(docs, progressbar = FALSE)
vocab = create_vocabulary(it)
vocab = prune_vocabulary(vocab, term_count_min = 5L)
vectorizer = vocab_vectorizer(vocab)

#tdm=tcm
tcm = create_tcm(it, vectorizer, skip_grams_window = 5L)
dtm = create_dtm(it, vectorizer, type = "dgTMatrix")


#freq <- colSums(as.matrix(dtm))

#計算top15次數
freq <- sort(colSums(as.matrix(dtm)), decreasing=TRUE)   
head(freq, 15)   

wf <- data.frame(word=names(freq), freq=freq)   
wf_top15 =head(wf,15)

library(ggplot2)   
ggplot(wf_top15, aes(x = reorder(word, -freq), y = freq)) +
  geom_bar(stat = "identity") + 
  theme(axis.text.x=element_text(angle=45, hjust=1))

###wordcloud for freq
library(wordcloud2)
wordcloud2(wf_top15)

###define compute year for freq
####
ptm <- proc.time()
library(qdap)
myFunc<-function(argument){
  articles1<-data.frame('Abstract'=paperdf$abstract, 'Year'=paperdf$year)
  abstracts1<-articles1[which(articles1$Year==argument),]
  abstracts1<-data.frame(abstracts1)
  abstractsOnly<-as.character(abstracts1$Abstract)
  abstractsOnly<-paste(abstractsOnly, sep="", collapse="")
  abstractsOnly<-as.vector(abstractsOnly)
  abstractsOnly<-strip(abstractsOnly)
  stsp<-rm_stopwords(abstractsOnly, stopwords = qdapDictionaries::Top100Words)
  ord<-as.data.frame(table(stsp))
  ord<-ord[order(ord$Freq, decreasing=TRUE),]
  head(ord,100) #??????
}
###
years_2017<-myFunc(2011)
#oSeven<-myFunc(2007)
all<-cbind(years_2017)
names(all)<-c("2017","freq")

proc.time() - ptm
######
#plot wordcloud
######

###wordcloud for freq
wordcloud2(all)
#wordcloud2(all, figPath = "/Users/charleswang/Desktop/DNA.png",color = "black")

###plot year 
paperdf %>%
  group_by(year) %>%
  count() %>%
  ggplot(aes(year, n)) +
  geom_point() +
  geom_line() +
  labs(title = "Pubmed articles with search terms `data science` & `population health` \n2015-2016", hjust = 0.5,
       y = "Articles")

paperdf %>%
  group_by(year) %>%
  count() %>%
  filter(year > 2013) %>%
  ggplot(aes(year, n)) +
  geom_point() +
  geom_line() +
  labs(title = "Pubmed articles with search terms `data science` & `population health` \n2015-2016", hjust = 0.5,
       y = "Articles")


#####
# yers
######


#######
#word2Vec and LDA process
######

#mixseg = worker(type = "mix",user = "D:/user.txt")
#str2=segment(str, mixseg )

######
#LSA model
#######
lda_model = LDA$new(n_topics = 5, doc_topic_prior = 0.1, topic_word_prior = 0.01)
doc_topic_distr = lda_model$fit_transform(x = dtm, n_iter = 1000, 
                                          convergence_tol = 0.001, n_check_convergence = 25, 
                                          progressbar = FALSE)

###plot boxplot of topic model
barplot(doc_topic_distr[1, ], xlab = "topic", 
        ylab = "proportion", ylim = c(0, 1), 
        names.arg = 1:ncol(doc_topic_distr))

lda_model$get_top_words(n = 10, topic_number = c(1L, 3L, 5L), lambda = 1)
lda_model$plot()

######
#LDA model2
######
library(topicmodels)
library(tidytext)
library(tidyr)
row_total = apply(dtm, 1, sum)
#row_total=slam::row_sums(dtm2, na.rm = T)
dtm.new = dtm[row_total>0,]

ptm <- proc.time()
desc_lda <- LDA(dtm.new, k = 2, control = list(seed = 123456))
proc.time() - ptm


tidy_lda <- tidy(desc_lda)

top_terms <- tidy_lda %>%
  group_by(topic) %>%
  top_n(10, beta) %>%
  ungroup() %>%
  arrange(topic, -beta)

top_terms %>%
  mutate(term = reorder(term, beta)) %>%
  group_by(topic, term) %>%    
  arrange(desc(beta)) %>%  
  ungroup() %>%
  mutate(term = factor(paste(term, topic, sep = "__"), 
                       levels = rev(paste(term, topic, sep = "__")))) %>%
  ggplot(aes(term, beta, fill = as.factor(topic))) +
  geom_col(show.legend = FALSE) +
  coord_flip() +
  scale_x_discrete(labels = function(x) gsub("__.+$", "", x)) +
  labs(title = "Top 10 terms in each LDA topic",
       x = NULL, y = expression(beta)) +
  facet_wrap(~ topic, ncol = 4, scales = "free")

######
#word2vec
######
glove = GlobalVectors$new(word_vectors_size = 50, vocabulary = vocab, x_max = 10)
wv_main = fit_transform(tcm, glove, n_iter = 20)
wv_context = glove$components

word_vectors = wv_main + t(wv_context)

###Woer2Vec Query
berlin = word_vectors["cancer", , drop = FALSE] - 
  word_vectors["man", , drop = FALSE] + 
  word_vectors["woman", , drop = FALSE]
cos_sim = sim2(x = word_vectors, y = berlin, method = "cosine", norm = "l2")
head(sort(cos_sim[,1], decreasing = TRUE), 5)

#######
#compute n-gram with tidy
#######
library(dplyr)
library(tidytext)
library(janeaustenr)
library(tidyr)
library(grid)
library(ggraph)

d <- data_frame(paperdf$abstract,txt = paperdf$abstract)
austen_bigrams <- d %>%
  unnest_tokens(ngram, txt, token = "ngrams", n = 2)
austen_bigrams %>%
  count(ngram, sort = TRUE)
bigrams_separated <- austen_bigrams %>%
  separate(ngram, c("word1", "word2"), sep = " ")
bigrams_filtered <- bigrams_separated %>%
  filter(!word1 %in% stop_words$word) %>%
  filter(!word2 %in% stop_words$word)
bigram_counts <- bigrams_filtered %>% 
  count(word1, word2, sort = TRUE)

library(igraph)
bigram_graph <- bigram_counts %>%
  filter(n > 6) %>%
  graph_from_data_frame()


set.seed(100)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
                 arrow = a, end_cap = circle(.02, 'inches')) +
  geom_node_point(color = "lightblue", size = 1) +
  geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
  theme_void()
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))

ggraph(bigram_graph, layout = "fr") +
  geom_edge_link(aes(edge_alpha = n), show.legend = FALSE,
                 arrow = a, end_cap = circle(.07, 'inches')) +
  geom_node_point(color = "lightblue", size = 5) +
  geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
  theme_void()






